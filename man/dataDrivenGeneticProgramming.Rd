% Generated by roxygen2 (4.0.1): do not edit by hand
\name{dataDrivenGeneticProgramming}
\alias{dataDrivenGeneticProgramming}
\title{Data-driven untyped standard genetic programming}
\usage{
dataDrivenGeneticProgramming(formula, data, fitnessFunctionFactory,
  fitnessFunctionFactoryParameters = list(),
  stopCondition = makeTimeStopCondition(5), population = NULL,
  populationSize = 100, eliteSize = ceiling(0.1 * populationSize),
  elite = list(), extinctionPrevention = FALSE, archive = FALSE,
  functionSet = mathFunctionSet, constantSet = numericConstantSet,
  crossoverFunction = NULL, mutationFunction = NULL,
  restartCondition = makeEmptyRestartCondition(),
  restartStrategy = makeLocalRestartStrategy(),
  searchHeuristic = makeAgeFitnessComplexityParetoGpSearchHeuristic(),
  breedingFitness = function(individual) TRUE, breedingTries = 50,
  progressMonitor = NULL, verbose = TRUE)
}
\arguments{
\item{formula}{A \code{\link{formula}} describing the task. Only simple
formulas of the form \code{response ~ variable1 + ... + variableN}
are supported at this point in time.}

\item{data}{A \code{\link{data.frame}} containing training data for the
GP run. The variables in \code{formula} must match column names in this
data frame.}

\item{fitnessFunctionFactory}{A function that accepts two parameters, a
code{\link{formula}}, data (given as a model frame) and the additional parameters
given in \code{fitnessFunctionFactoryParameters} and returns a fitness function.}

\item{fitnessFunctionFactoryParameters}{Additional parameters to pass to the
\code{fitnessFunctionFactory}.}

\item{stopCondition}{The stop condition for the evolution main loop. See
\code{makeStepsStopCondition} for details.}

\item{population}{The GP population to start the run with. If this parameter
is missing, a new GP population of size \code{populationSize} is created
through random growth.}

\item{populationSize}{The number of individuals if a population is to be
created.}

\item{eliteSize}{The number of elite individuals to keep. Defaults to
\code{ceiling(0.1 * populationSize)}.}

\item{elite}{The elite list, must be alist of individuals sorted in ascending
order by their first fitness component.}

\item{extinctionPrevention}{When set to \code{TRUE}, the initialization and
selection steps will try to prevent duplicate individuals
from occurring in the population. Defaults to \code{FALSE}, as this
operation might be expensive with larger population sizes.}

\item{archive}{If set to \code{TRUE}, all GP individuals evaluated are stored in an
archive list \code{archiveList} that is returned as part of the result of this function.}

\item{functionSet}{The function set.}

\item{constantSet}{The set of constant factory functions.}

\item{crossoverFunction}{The crossover function.}

\item{mutationFunction}{The mutation function.}

\item{restartCondition}{The restart condition for the evolution main loop. See
\link{makeEmptyRestartCondition} for details.}

\item{restartStrategy}{The strategy for doing restarts. See
\link{makeLocalRestartStrategy} for details.}

\item{searchHeuristic}{The search-heuristic (i.e. optimization algorithm) to use
in the search of solutions. See the documentation for \code{searchHeuristics} for
available algorithms.}

\item{breedingFitness}{A "breeding" function. This function is applied after
every stochastic operation \emph{Op} that creates or modifies an individal
(typically, \emph{Op} is a initialization, mutation, or crossover operation). If
the breeding function returns \code{TRUE} on the given individual, \emph{Op} is
considered a success. If the breeding function returns \code{FALSE}, \emph{Op}
is retried a maximum of \code{breedingTries} times. If this maximum number of
retries is exceeded, the result of the last try is considered as the result of
\emph{Op}. In the case the breeding function returns a numeric value, the breeding
is repeated \code{breedingTries} times and the individual with the lowest breeding
fitness is considered the result of \emph{Op}.}

\item{breedingTries}{In case of a boolean \code{breedingFitness} function, the
maximum number of retries. In case of a numerical \code{breedingFitness} function,
the number of breeding steps. Also see the documentation for the \code{breedingFitness}
parameter. Defaults to \code{50}.}

\item{progressMonitor}{A function of signature
\code{function(population, fitnessfunction, stepNumber, evaluationNumber,
bestFitness, timeElapsed)} to be called with each evolution step.}

\item{verbose}{Whether to print progress messages.}
}
\value{
A model structure that contains the formula and an untyped GP population.
}
\description{
Perform an untyped genetic programming using a fitness function that depends
on a R data frame. Typical applications are data mining tasks such as symbolic
regression or classification. The task is specified as a \code{\link{formula}}
and a fitness function factory. Only simple formulas without interactions are
supported. The result of the data-driven GP run is a model structure containing
the formulas and an untyped GP population.
This function is primarily an intermediate for extensions. End-users will
probably use more specialized GP tools such as \code{\link{symbolicRegression}}.
}
\seealso{
\code{\link{geneticProgramming}}
}

