% rgp_introduction.Rnw
%\VignetteIndexEntry{A Friendly Introduction to RGP}
%
% 2013-2014 Oliver Flasch
% SPOTSeven group / rsymbolic project
% Cologne University of Applied Sciences
%

\documentclass[a4paper, twoside]{tufte-handout}
\setcounter{secnumdepth}{2} % enable section numbers

\usepackage[english]{babel}
\renewcommand{\figurename}{Fig.}
\usepackage{amsmath,amssymb}
\usepackage[pdftex]{graphicx}
  \graphicspath{{figures/}}
\usepackage{xcolor}
\usepackage[intoc]{nomencl}
\usepackage{xspace}
\usepackage{booktabs}
\usepackage{url}
\usepackage{lipsum}
\usepackage{natbib}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fancyvrb}
  \fvset{fontsize=\normalsize}
\usepackage{mathpazo}
% To install the URW Classico (Optima) Fonts in TeX Live,
% run "getnonfreefonts-sys classico" as root
\renewcommand*\sfdefault{uop}
\def\clang{{\sf C}\xspace}
\def\cran{{\sf CRAN}\xspace}
\def\doe{{\sc DoE}\xspace}
\def\ec{{\sc EC}\xspace}
\def\emoa{{\sf EMOA}\xspace}
\def\gp{{\sc GP}\xspace}
\def\rlang{{\sf R}\xspace}
\def\rgp{{\sf RGP}\xspace}
\def\rgpui{{\sf RGPUI}\xspace}
\def\rmse{{\sc RMSE}\xspace}
\def\roi{{\sc ROI}\xspace}
\def\rproject{{\sf R Project}\xspace}
\def\rrules{{\sf Rrules}\xspace}
\def\rsymbolic{{\sf Rsymbolic}\xspace}
\def\spo{{\sc SPO}\xspace}
\def\spot{{\sf SPOT}\xspace}
\def\spotseven{{\sf SPOTSeven}\xspace}
\definecolor{linkcol}{rgb}{0, 0, 0} 
\definecolor{citecol}{rgb}{0, 0, 0}
\hypersetup{
  bookmarksopen = true,
  pdftitle = RGP Introduction, 
  pdfauthor = Oliver Flasch,
  colorlinks = true,
  linkcolor = linkcol,
  citecolor = citecol,
  urlcolor = linkcol}
\title[RGP Introduction]{A Friendly Introduction to RGP}
\date{7. August 2014 (RGP release 0.4-1)}
\author[Oliver Flasch]{Oliver Flasch}


\begin{document}

\maketitle

\begin{abstract}
  \noindent \rgp is genetic programming system based on, as well as fully
  integrated into, the \rlang environment. The system implements classical
  tree-based genetic programming as well as other variants including, for
  example, strongly typed genetic programming and Pareto genetic programming.
  It strives for high modularity through a consistent architecture that allows
  the customization and replacement of every algorithm component, while
  maintaining accessibility for new users by adhering to the "convention over
  configuration" principle. Performance critical sections have efficient
  implementations in \clang, making the system suitable for real-world
  application. Typical \gp applications are supported by well-known \rlang
  ideoms. For example, symbolic regression via \gp is supported by the same
  "formula interface" as linear regression in \rlang.
\end{abstract}


\begin{marginfigure}[-11.3cm]
  \centering
  \includegraphics[width=.75\linewidth]{figures/logo_rgp.pdf}
  \setfloatalignment{t}
\end{marginfigure}

This text provides a friendly introduction to \rgp, a flexible system for
genetic programming (\gp) in the \rlang environment for statistical
computing. After section~\ref{sec:gp} introduces \gp in the abstract and
section~\ref{sec:applications} sets the stage with typical 
applications of \gp in general and \rgp in particular,
section~\ref{sec:features} outlines the range and depth of \rgp's features.
\rgp is a large package that can be daunting for the first-time user. To 
help getting started, section~\ref{sec:tutorials} provides a set of hands-on
tutorials, beginning with simple tasks, including getting \rgp up and running
in an existing \rlang installation, up to advanced topics like strongly typed
genetic programming. The outlook in section~\ref{sec:outlook} gives hints on
where to go from here, including references to \gp literature as well as
\rgp's comprehensive online documentation and web resources. 


\section{Genetic Programming}\label{sec:gp}
\gp is a collection of techniques from evolutionary computing (\ec) for the
automatic generation of computer programs that perform a user-defined task
\citep{Poli08a, Banz98a}. Starting with a high-level problem definition, \gp
creates a population of random programs that are progressively refined through
variation and selection until a satisfactory solution is found.

An important advantage of \gp is that no prior knowledge concerning the
solution structure is needed. Another advantage is the representation of
solutions as terms of a formal language (symbolic expressions), i.e. in a form
accessible to human reasoning. The main drawback of \gp is its high
computational cost, due to the potentially infinitely large search space of
symbolic expressions. On the other hand, the recent availability of fast
multi-core systems has enabled the practical application of \gp in many
real-world application areas. This has lead to the development of a variety of
software frameworks for \gp, including DataModeler, Discipulus, ECJ, Eurequa,
and GPTIPS.

All of these systems are complex aggregates of algorithms for solving not only
\gp specific tasks, such as solution creation, variation, and evaluation, but
also more general \ec tasks, like single- and multi-objective selection, and
even largely general tasks like the design of experiments, data pre-processing,
result analysis and visualization. Packages like Matlab, Mathematica, and
\rlang~\citep{Rcor09a} already provide solutions for the more general tasks,
greatly simplifying the development of \gp systems based on these environments
and also lowering the barrier of entry for users who already know the
underlying package.

\rgp\footnote{The \rgp package and documentation is available at
\url{rsymbolic.org}.} is based on the \rlang environment for several reasons.
Firstly, there seems to be a beneficial trend towards employing statistical
methods in the analysis and design of evolutionary algorithms, including modern
\gp variants~\citep{Sun09a, Bart09a}. Secondly, \rlang's open development model
has led to the free availability of \rlang packages for most methods from
statistics and many methods from \ec. Also, the free availability of \rlang
itself makes \rgp accessible to a wide audience. Thirdly, the \rlang language
supports ``computing on the language'', which greatly simplifies symbolic
computation inherent in most \gp operations. In addition, parallel execution of
long-running \gp runs is easily supported by the \rlang package.


\section{Application Areas}\label{sec:applications}
\gp in general, and \rgp as a modular \gp system in particular, has a wide
array of possible application areas. Basically, \gp is a evolutionary search
heuristic for arbitrary symbolic expressions, i.e. mathematical or logical
formulas.. A non-exhaustive list of \rgp-applications include:
\begin{itemize}
\item {\em Symbolic Regression:} Given a set of measurement data divided into
dependent and independent variables, symbolic regression can discover the
functional relationship between dependent and independent variables. This
relationship is represented as a symbolic expression, which can be used to
gain insight into the data-generating process or system
(system identification), and as a model to predict the values of dependent
variables for unseen values of independent variables (intra- and
extrapolation). Figure~\ref{fig:oscillator} provides a simple example.
\item {\em Feature Selection:} Not all independent variables must have an
influence on the values of the dependent variables. In many practical
applications, only a small subset of independent variables affect the
dependent variables. The task then is to identify this subset, which can
be done by \gp in a very robust fashion.
\item {\em Automatic Programming:} As computer programs are symbolic
expression, \gp can be used for automatic programming, which explains the
name of the method. This requires a  set of program building blocks and
a fitness function that assigns a numerical quality measure to each candidate
program. For small programs describing core algorithm components, this
approach already works in practice.
\item {\em General Expression Search:} The applicability of \gp even goes
beyond automatic programming. The method can be used to discover all
structures that are representable by symbolic expressions of moderate
complexity. Examples include electrical circuits, antenna designs,
processing networks in manufacturing and logistics, and many others.
\end{itemize}

\begin{marginfigure}
  \includegraphics[width=1\linewidth]{figures/do_arith_trig_1.pdf}
  \caption{Symbolic regression of the governing law of a damped oscillator:
  \rgp enables symbolic regression via genetic programming. This example shows
  how \rgp is used to find the governing physical law of a damped oscillator.
  In contrast to other regression methods, the solution is expressed as a
  mathematical formula accessible to human interpretation and validation. In
  this figure, the true oscillator law and behaviour are shown in dashed red,
  the solution found by \rgp is shown in solid black.}
  \label{fig:oscillator}
  \setfloatalignment{t}
\end{marginfigure}

The \rgp system is flexible enough to be applied in nearly all possible \gp
application areas. It already has been successfully applied in such diverse
areas as support vector machine kernel generation for machine learning,
surrogate model ensemble generation for engineering optimization, and time
series prediction for water resource management applications.


\section{Features}\label{sec:features}
To give an idea of the extend and limits of \rgp's feature set, this section
provides an non-exhaustive overview of the system. Detailed documentation of
all functionality, including examples, can be found in the online help of the
package.

\subsection{Solution Representation}
\rgp represents candidate solutions, i.e. \gp individuals, as \rlang
expressions that can be directly evaluated by the \rlang interpreter. This
allows the whole spectrum of functions available in \rlang to be used as
building blocks for \gp. Because \rlang expressions are internally represented
as trees, \rgp may be seen as a tree-based \gp system. However, the individual
representation can be easily replaced together with the associated variation
and evaluation operators, if an alternative representation is found to be more
effective for a given application~\citep{Schm07a}.

Besides classical (untyped) \gp, strongly typed \gp is supported by a type
system based on simply typed lambda calculus~\citep{Bare92a}. A distinctive
feature of \rgp's typed tree representation is the support for {\em function
defining subtrees}, i.e. anonymous functions or lambda abstractions. In
combination with a type system supporting function types, this allows the
integration of common higher order functions like folds, mappings, and
convolutions, into the set of \gp building blocks, greatly increasing \rgp's
applicability in many ``non-classical'' \gp application areas.

\rgp also includes \rrules, a rule based translator for transforming \rlang
expressions. This mechanism can be used to simplify \gp individuals as part of
the evolution process as a means the reduce bloat, or just to simplify solution
expressions for presentation and later use. The default rule base implements
simplification of arithmetic expressions. \rrules  can be easily extended to
simplify expressions containing user-defined operators and functions.

\subsection{GP Operators}
\rgp provides default implementations for several initialization, variation,
and selection operators. The system offers clear interfaces for user-defined
operators, as well as the possibility to replace the evolutionary algorithm
used for \gp search with user defined variants, without the need to rewrite
other functionality.

\paragraph{Initialization} Individual initialization can performed by the
conventional grow and full strategies of tree building. When using
strongly-typed \gp, the provided individual initialization strategies respect
type constraints and will create only well-typed expressions. Initialization
strategies may be freely combined, e.g. to implement the well known
ramped-half-and-half strategy.

\paragraph{Variation} \rgp includes classical and type-safe subtree crossover
operators. Also, several classical and type-safe mutation operators are
provided. The variation pipeline can be freely configured by combining several
mutation and recombination operators to be applied in parallel or consecutively,
with freely configurable probabilities.

\paragraph{Selection} The system provides several single- and multi-objective
selection operators. Other selection strategies can be easily added by the
user. Multi-objective selection is supported via the \emoa package.\footnote{The
  \emoa Evolutionary Multiobjective Optimization Algorithm toolbox for \rlang
  is available at \url{http://git.datensplitter.net/cgit/emoa}.} The
multi-objective search strategy optimizes solution quality while, at the same
time, controlling solution complexity and population diversity. For this
purpose, \rgp implements multiple complexity measures for \gp individuals.

\begin{figure*}[h]
  \centering
  \fbox{\includegraphics[width=1\linewidth]{figures/rgpui.png}}
  \caption{\rgp's graphical user interface for symbolic regression: Although
  \rgp is basically a command-line driven system, much like the underlying
  \rlang environment, graphical user interfaces are provided where they ease
  interaction and exploration. The web-based graphical user interface for symbolic
  regression, available in form of the \cran package \rgpui, allows the direct
  manipulation of the most important \gp parameters.}
  \label{fig:rgpui}
  \setfloatalignment{t}
\end{figure*}

\subsection{Analysis and Visualization}
The \rgp system provides tools for the analysis and visualization of \gp
individuals and populations. \gp individuals, i.e. symbolic regressions,
can be visualized as trees (in multiple levels of detail), as formulas
in mathematical notation, as points in a Pareto plot, or as plots of their
input/output behaviour. \gp populations can be visualized as forests of
schematic trees, as Pareto plots, or as variable presence charts.

As \rgp is based on \rlang, a vast array of statistical tools for analyzing
\gp individuals, \gp populations and \gp system performance are readily
available. For example, integration with the \spot package for sequential
parameter optimization allows the automatic tuning of critical \gp algorithm
parameters. The \rgp online documentation provides examples for typical
applications of each visualization and analysis technique.

Although \rgp is basically a command-line driven system, like the underlying
\rlang package, graphical user interfaces are provided where they ease
interaction and exploration. The web-based graphical user interface for symbolic
regression (see figure~\ref{fig:rgpui}) allows direct manipulation of
the most important \gp parameters. The graphical user interface \rgpui is
delivered as an add-on package for \rgp and available on \cran. 


\section{Tutorials}\label{sec:tutorials}
To help getting started with \rgp, this section provides a set of hands-on
tutorials, beginning with simple tasks, including getting \rgp up and running
in an existing \rlang installation, up to advanced topics like strongly typed
genetic programming. All tutorials are meant to be followed stepwise in a
running \rlang session.

\subsection{Installation}
\rgp is available as an \rlang package on the comprehensive \rlang
archive network \cran, making installation extremely simple. To install \rgp
and all it's dependencies, issue the following command in a running \rlang
session:

<<installation, eval = FALSE>>= % TODO remove eval = FALSE 
install.packages("rgp")
@

A prompt will appear asking to select a \cran mirror will appear if it is the
first time an \rlang package is installed in your \rlang installation. Just
select a mirror location near you. The installation of \rgp may take some time,
as dependencies are downloaded and compilation steps are performed.

\subsection{Getting Started}
This tutorial provides an interactive walkthrough of solving a simple
symbolic modelling problem with \gp. Only basic low-level \rgp functionality
is used, high-level convenience functions are intentionally avoided to make
each step in the modelling process clear and explicit.

In this first example, we configure \rgp to create polynomial approximations
of the sine function. To make \rgp's functionality available in a running
\rlang session, the package has to be loaded via the {\tt library} command:

<<library>>=
library("rgp")
@

\paragraph{Defining the \gp Search Space} In \rgp, candidate solutions are
represented as regular \rlang functions. The bodies of these functions are
build from a set input variables, a set of constants, and a set of function
symbols. These members of these sets are often referred to as \gp building
blocks. In other words, these three sets define the symbolic expression
search space.

As our example task is the approximation of the sine function with polynomials,
we create a function symbol set containing only addition, multiplication, and
subtraction.

<<sine_unction_set_1>>=
functionSet1 <- functionSet("+", "*", "-")
@

We then create a set of input variables containing just the symbol $x$. Thereby
we restrict the search space to univariate functions, i.e. function of one
variable:.

<<sine_input_variable_set_1>>=
inputVariableSet1 <- inputVariableSet("x")
@

Finally, we create a set of constants. Constants are not created directly, but
via constant factory functions. Each time a constant has to be created during
\gp search, \rgp calls a constant factory function. Here we use a single
constant factory that returns constants from a normal distribution:

<<sine_constant_factory_set_1>>=
constantFactorySet1 <- constantFactorySet(function() rnorm(1))
@

\paragraph{Defining the Fitness Function}
The fitness function, or objective function, associates a numerical fitness
value to a candidate solution. \rgp relies on the fitness function to direct its
evolutionary search. The fitness function defines the problem to be solved by
\gp. As already mentioned, in this example, we will use \rgp to find functions
approximating the sine function in the interval {\tt interval1} $[-\pi, \pi]$.
We sample this interval in steps of size 0.1:

<<sine_fitness_function_1>>=
interval1 <- seq(from = -pi, to = pi, by = 0.1)
fitnessFunction1 <- function(f) rmse(f(interval1), sin(interval1))
@

By default, \rgp minimizes fitness values, so lower values should be associated
with better solutions. Here, we use the root mean error (\rmse) of a given sine
approximation against the true sine function as a fitness function.\footnote{The
problem defined here is a typical symbolic regression problem. \rgp also
features a simple interface for symbolic regression, which is introduced in the
next tutorial on symbolic regression.}

\paragraph{Performing the \gp Run} We are now ready to start the search for
symbolic expressions of good fitness values, i.e. start the \gp run:

<<sine_gp_run_1, eval = FALSE>>=
set.seed(1)
gpResult1 <- geneticProgramming(functionSet = functionSet1,
                                inputVariables = inputVariableSet1,
                                constantSet = constantFactorySet1,
                                fitnessFunction = fitnessFunction1,    
                                stopCondition = makeTimeStopCondition(5 * 60))
@

The first command will first set \rlang's random number generator seed to a
defined value (here 1) to create reproducible results. Then, we perform a \gp
run that stops after 5 minutes and store the results of this run in the \rlang
variable {\tt gpResult1}. The \gp runtime budget can be adjusted by changing
the parameter to {\tt makeTimeStopCondition}.

\paragraph{Analyzing the Result Population} Finally, we select the best sine
approximation found during the \gp run:

<<sine_best_solution_1, eval = FALSE>>=
bestSolution1 <- gpResult1$population[[which.min(gpResult1$fitnessValues)]]
@

We then create a plot of the approximation created by $bestSolution1$ versus the
true sine function (see figure~\ref{fig:best_versus_true_sine}):

<<sine_best_solution_1_plot, eval = FALSE>>=
plot(y = bestSolution1(interval1), x = interval1, type = "l",
  lty = 1, xlab = "x", ylab = "y")
lines(y = sin(interval1), x = interval1, lty = 2)
@

\begin{figure}[h]
  \centering
  \includegraphics[width=0.75\linewidth]{figures/best_versus_true_sine.pdf}
  \caption{Best \gp-generated polynomial approximation (solid line)
  versus true sine function (dashed line).}
  \label{fig:best_versus_true_sine}
  \setfloatalignment{t}
\end{figure}

\paragraph{Next Steps} This concludes this basic tutorial. Of course there
is much room for experimentation. For example, we could change the members of
{\tt functionSet1} by adding the cosine function {\tt cos} and observe the
effects on the \gp result.

Please note that we omitted many \rgp convenience functions that would have made
this particular example much shorter. Also note that in this example, we only
dealt with a single optimization criterion and functions defined on real
numbers. \rgp also supports multi-objective optimization of functions that work
on arbitrary data types. The next tutorials give practical examples of some of
these more advanced features.

\subsection{Symbolic Regression}
\rgp offers convenience functions to simplify the solution of common \gp tasks.
This tutorial shows how to use the {\tt symbolicRegression} function to solve
symbolic modelling and regression tasks with minimal configuration work.

Theme of this tutorial is the discovery of a mathematical formula describing
the behaviour of a physical system based on measurement data, i.e. symbolic
regression. For sake of simplicity and clarity, we generate this data by
applying a text-book formula describing a damped pendulum. The task of \rgp
then becomes the rediscovery of that formula and the numerical values of
the formula's parameters.

\paragraph{Task Definition} The formula below, given as an \rlang function
factory, represents a damped pendulum. The arguments are the starting
amplitude $A_0$, gravity $g$, pendulum length $l$, phase $\phi$ (phi), damping
factor $\gamma$ (gamma), and radial frequency $\omega$ (omega).

<<pendulum>>=
makeDampedPendulum <- function(A0 = 1, g = 9.81, l = 0.1, phi = pi, gamma = 0.5) {
  omega <- sqrt(g/l)
  function(t) A0 * exp(-gamma * t) * cos(omega * t + phi)
}
@

This function factory can now be used to generate functions describing the
deflection of concrete pendulums of different specifications at a certain point
in time $t$:

<<pendulum_examples>>=
pendulum1 <- makeDampedPendulum(l = 0.5)
pendulum2 <- makeDampedPendulum(l = 1.2, A0 = 0.5)
@

The deflection of these pendulums can easily be plotted against time (see
figure~\ref{fig:pendulum_example_plots}):

<<pendulum_example_plots>>=
interval1 <- seq(from = 0, to = 10, by = 0.05)
plot(y = pendulum1(interval1), x = interval1, type = "l",
  lty = 1, xlab = "t", ylab = "deflection")
lines(y = pendulum2(interval1), x = interval1, lty = 2)
@

\begin{figure}[h]
  \centering
<<fig = TRUE, echo = FALSE>>=
<<pendulum_example_plots>>
@
  \caption{Deflection against time of two example pendulums: {\tt pendulum1}
  is shown as a solid line, {\tt pendulum2} is shown as a dashed line.}
  \label{fig:pendulum_example_plots}
  \setfloatalignment{t}
\end{figure}

\paragraph{Creating Data} We create a data frame of $512$ samples of
{\tt pendulum1} in the time interval $[1, 10]$. To simulate real measurement
data, we add normally distributed noise with mean $0$ and standard deviation
$0.01$ to the simulated values.

<<pendulum_data>>=
  xs1 <- seq(from = 1, to = 10, length.out = 512)
  pendulum1Data <- data.frame(time = xs1,
    deflection = pendulum1(xs1) + rnorm(length(xs1), sd = 0.01))
@

\paragraph{Symbolic Regression Run} We are now ready to start a symbolic
regression run. Make sure to load the \rgp package via {\tt library("rgp")}.
We choose a time budget of 2 minutes:

<<pendulum_gp_run, eval = FALSE>>=
modelSet1 <- symbolicRegression(deflection ~ time, data = pendulum1Data,
                                stopCondition = makeTimeStopCondition(2 * 60))
@

\paragraph{Result Analysis} Selection and plotting of the model with best
fitness can be performed as follows:

<<pendulum_result_analysis, eval = FALSE>>=
bestModel1 <- modelSet1$population[[which.min(modelSet1$fitnessValues)]]
plot(y = bestModel1(xs1), x = xs1, type = "l",
  lty = 1, xlab = "x", ylab = "y")
lines(y = pendulum1(xs1), x = xs1, lty = 2)
@

A slightly improved version of the output produced by these commands is shown
in figure~\ref{fig:oscillator}.

\paragraph{Next Steps} The {\tt symbolicRegression} commands offers many
configuration options to explore. See the online help available by typing
{\tt ?symbolicRegression} on an \rlang command line for details or visit
the \rgp website at \url{rsymbolic.org}.

Perhaps most importantly, {\tt symbolicRegression} supports multi-variate
regression simply via \rlang's formula interface. To perform symbolic
regression in two variables $x_1$ and $x_2$ with output variable $y$, the
formula $y ~ x1 + x2$ can be used as the first argument to
{\tt symbolicRegression}.

\subsection{Strongly Typed Genetic Programming}
Theme of this tutorial is the evolution of boolean functions via strongly
typed genetic programming. Although slightly more complex than the previous
tutorials, it will prepare you apply \rgp to a much broader set of tasks.

\paragraph{Task Definition} An example, we will use typed genetic programming
to discover symbolic representations of the 3-parity function.\footnote{The
3-parity function is the parity function for 3 bits, i.e. a with 3 input
parameters.} For reasons of flexibility, we start with an \rlang-implementation
of the general parity function:

<<typed_parity>>=
parity <- function(x) {
  numberOfOnes <- sum(sapply(x, function(bit) if (bit) 1 else 0))
  numberOfOnes %% 2 != 0
}
@

For a boolean input vector $x$, the parity function returns true if the number
of ones in $x$ is odd. We specialize this general function to three parameters
with the following wrapper function:

<<typed_parity3>>=
parity3 <- function(x1, x2, x3) parity(c(x1, x2, x3))
@

Next, we use the \rgp tool function {\tt makeBooleanFitnessFunction} to convert
{\tt parity3} to a fitness function. The resulting {\tt parityFitnessFunction}
returns the number of different places in the value table of a boolean function
presented as a parameter and the value table of the {\tt parity3} function:

<<typed_parity_fitness>>=
parityFitnessFunction <- makeBooleanFitnessFunction(parity3)
@

This fitness function represents a distance metric: The Hamming distance of a
3-parameter boolean function given as the fitness function parameter from the
{\tt parity3} function, i.e. a norm. In other words, the
{\tt parityFitnessFunction} returns the number of input vectors for which a
given boolean functions differs in output from the {\tt parity3} function. 
As there are $2^3 = 8$ different possible boolean input vectors of length 3,
the worst fitness is 8, and the best fitness is 0. Note the ambiguity of the
term ``worst fitness'' in this case, as simply negating the output of a
function of worst fitness yields a function with a perfect fitness of 0.
\gp search spaces of rich and interesting structure are very common,
and it is often beneficial to customize \gp search heuristic to exploit
existing knowledge on search space structure to speed up search considerably.

As in the previous tutorials, we have to load the \rgp package by issuing the
{\tt library("rgp")} command. Next, we define the set of symbolic expressions
to be searched by \rgp by providing \gp building blocks for boolean functions.
The constant factory set contains a single constant factory that creates
boolean constants by fair coin-tosses:

<<typed_boolean_constant_set>>=
booleanConstantFactory <- function() runif(1) > .5
booleanConstantSet <- constantFactorySet(
  "booleanConstantFactory" %::% (list() %->% st("logical")))
@

The function set contains the boolean functions {\em and} ({\tt \&}), {\em or}
({\tt |}) and {\em not} ({\tt !}):

<<typed_boolean_function_set>>=
booleanFunctionSet <- functionSet(
  "&" %::% (list(st("logical"), st("logical")) %->% st("logical")),
  "|" %::% (list(st("logical"), st("logical")) %->% st("logical")),
  "!" %::% (list(st("logical")) %->% st("logical")))
@

The input variable set contains the three function parameters {\tt x1},
{\tt x2}, and {\tt x3}:

<<typed_boolean_input_variable_set>>=
booleanInputVariableSet <- inputVariableSet(
  "x1" %::% st("logical"), 
  "x2" %::% st("logical"), 
  "x3" %::% st("logical"))
@

The building block definitions above use a special \rgp syntax for type
annotations. The {\tt {\em expression} \%::\% {\em type}} operator associates
an \rlang expression with an \rgp type. An \rgp type is either a base type
of the form {\tt st({\em type name})} or a function type of the form
{\tt list({\em parameter type 1}, {\em parameter type 2}, \dots) \%->\%
{\em result type}}. This is a recursive definition, meaning that \rgp types
can express types for higher order functions, making them quite flexible. The
theoretical basis of \rgp's type system is the simply typed lambda
calculus~\citep{Bare92a}. A noteworthy limitation of this system is the lack
of the generic types available in programming languages such as C++ or Java.

With these definitions, we are able to explain the semantics of the types
associated with the \gp building blocks above:
\begin{itemize}
\item {\tt list() \%->\% st("logical")} is the type of a function with no
arguments that returns a boolean value.\footnote{a {\tt logical} in \rlang's
terminology} This is the type of the single constant factory in the
{\tt booleanConstantSet} defined above.
\item {\tt list(st("logical"), st("logical")) \%->\% st("logical")} is the type
of a function taking two boolean arguments and returning a boolean value. This
is the type of each function in the {\tt booleanFunctionSet} defined above.
\item Trivially, {\tt st("logical")} is the type of boolean values. This is the
type of each input variable in the {\tt booleanInputVariableSet} defined above.
\end{itemize}

\paragraph{Strongly Typed Genetic Programming Run} With the fitness function
and search space defined, we are now ready to start a strongly typed \gp run:

<<typed_gp_run, eval = FALSE>>=
typedGpResult1 <- typedGeneticProgramming(parityFitnessFunction, st("logical"),
  functionSet = booleanFunctionSet,
  inputVariables = booleanInputVariableSet,
  constantSet = booleanConstantSet,
  stopCondition = makeTimeStopCondition(30))
@

Note that {\tt typedGeneticProgramming} expects the result type of the
solution functions to generate as a second parameter, as this is not explicit
from the building block definition. As we generate boolean functions, we state
{\tt st("logical")} here.

After running for 30 seconds, the result of the \gp run is assigned to the
variable {\tt typedGpResult1}. As in the previous tutorials, the runtime (in
seconds) can be adjusted by changing the parameter to
{\tt makeTimeStopCondition}.

\paragraph{Result Analysis} Selection of the boolean function with best
fitness is performed much like in the previous tutorials:

<<typed_gp_result_analysis, eval = FALSE>>=
bestFunction1 <- typedGpResult1$population[[which.min(typedGpResult1$fitnessValues)]]
@

See \rgp's online documentation for details on visualizing and analyzing typed
\gp results. For example, the \rrules package includes as a \rgp dependency
can be employed for rule-based simplification of boolean functions.

\subsection{Sequential Parameter Optimization for Genetic Programming}
Finding good algorithm parameter settings for concrete Genetic Programming 
applications is a complex task. Sequential parameter optimization (\spo)
provides a framework for applying modern statistical methods to solve this
task. This tutorial shows how to apply the sequential parameter optimization
toolbox (\spot) to a very simple \rgp setup.

\paragraph{SPOT Installation}
As \rgp, \spot is available as an \rlang package on the comprehensive \rlang
archive network \cran. To install \spot and all it's dependencies, issue the
following command in a running \rlang session:

<<spot_installation, eval = FALSE>>=
install.packages("SPOT")
@

\paragraph{SPO Definition}
The \spot package includes a very simple example for tuning \rgp algorithm
parameters. In this example, \rgp is configured to use single-objective \gp
with tournament selection to solve the two-dimensional symbolic regression
problem given in the following \rlang script:

<<spot_rgp_, eval = FALSE>>=
x1 <- seq(0, 4 * pi, length.out = 201)
x2 <- seq(0, 4 * pi, length.out = 201)
y <- sin(x1) + cos(2 * x2)
data1 <- data.frame(y = y, x1 = x1, x2 = x2)

result1 <- symbolicRegression(y ~ x1 + x2,
  data = data1,
  populationSize = populationSize,
  selectionFunction = makeTournamentSelection(tournamentSize = tournamentSize),
  functionSet = arithmeticFunctionSet,
  stopCondition = makeTimeStopCondition(time))

bestFitness <- min(sapply(result1$population, result$fitnessFunction))
@

This \rlang script is part of the \spot package and does not need to entered
by hand. It is reproduced here for illustrative purposes.

\spo is applied to find parameter settings for {\tt populationSize} and
{\tt tournamentSize} that optimize (i.e. minimize) {\tt bestFitness}. The region
of interest (\roi) for this optimization given in the file {\tt rgp0001.roi}
and shown in Table~\ref{tab:spot_roi}. Parameters belonging to the problem
design, in this case just the parameter {\tt time}, giving the maximum runtime
in seconds for a symbolic regression run, are given in the file
{\tt rgp0001.apd}. Parameters for \spot are given in the file
{\tt demo17Rgp.conf}. All these files can be found in the directory indicated
by the \rlang expression {\tt file.path(find.package("SPOT"), "demo17Rgp")}.

\begin{table}[ht]
\begin{tabular}{lllrr}
\toprule
Parameter            & Type    & \roi Interval \\
\midrule
{\tt populationSize} & Integer & $[20, 1000]$  \\
{\tt tournamentSize} & Integer & $[20, 1000]$  \\
\bottomrule
\end{tabular}
\caption{Region of interest used in the \spot example for tuning \rgp algorithm
parameters.}
\label{tab:spot_roi}
\end{table}

\paragraph{SPO Run}
To start the \spo run, issue the following commands:

<<spot_run, eval = FALSE>>=
library("SPOT")
confPath <- find.package("SPOT")
confPath <- file.path(confPath, "demo17Rgp")
confFile <- file.path(confPath, "rgp0001.conf")
spotConfig <- spot(confFile)
@

\paragraph{SPO Result Analysis}
After the \spo run, results are available in a list data structure stored in
the {\tt spotConfig} variable. See the \spot online documentation for details.


\section{Outlook}\label{sec:outlook}
This concludes the short introduction to \rgp. There are many more possibilities
and use case scenarios not touched upon here. Also, \rgp is a evolving system,
so new functionality might be present to improve the performance or ease of use
at tasks described in the tutorials. The \rsymbolic website\footnote{see
\url{rsymbolic.org}} provides the most current information on the current state
of \rgp, as well as additional tutorials and documentation. This website also
contains a roadmap of planned features, access to development versions, as well
as instructions on how to contribute to the project.

As already mentioned, \rgp also offers detailed online documentation of all its
functionality. Type {\tt help(package = "rgp")} in a running \rlang session to
get an overview of this documentation.


% bibliography
\bibliographystyle{plainnat}
\bibliography{rgp_introduction}


\clearpage
\thispagestyle{empty}
\section*{Imprint}
\begin{minipage}[t]{\linewidth}
Oliver Flasch\\
\spotseven group / \rsymbolic project\\
Cologne University of Applied Sciences\\
Steinmüllerallee 1\\
51643 Gummersbach\\
Germany\\
Web: \url{rsymbolic.org}\\
Email: {\tt oliver.flasch@fh-koeln.de}\\
\vspace{0.5cm}
\small{\copyright~2010-13 \rsymbolic project}\\
\small{All other trademarks and copyrights are\\
the property of their respective owners.}
\end{minipage}


\end{document}
